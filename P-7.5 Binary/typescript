Script started on Wed Jul 18 00:28:30 2018
[?1034hbash-3.2$ ls
BST.cpp		a.out		main.cpp
BST.h		infofile	typescript
bash-3.2$ cat infofile 
lab P-7.5
LEvel 3
bash-3.2$ Cat[K[K[Kcat main.cpp 
//
//  main.cpp
//  P-7.5 Binary
//
//  Created by Harrison  Bueno on 7/15/18.
//  Copyright Â© 2018 Harrison  Bueno. All rights reserved.
//

#include <iostream>
#include <cstdlib>
#include "BST.cpp"

using namespace std;
int main() {
    int treeKeys[16] = {14, 5, 45, 7, 69, 38, 58, 3, 1, 9, 99,12, 13, 44, 15,23};
    BST myTree;
    ///cout<<"\nPrinting tree in order b/f adding numbers: \n";
    //myTree.printInOrder();
    
    for(int i=0; i<16; i++){
        myTree.addLeaf(treeKeys[i]);
    }
   // cout<<"\nPrinting tree in order after adding numbers: \n";
   // myTree.printInOrder();
    
    cout << "\nPrint tree: \n";
    myTree.printTree();
    
     return 0;
}
bash-3.2$ cat bs[K[KBST.h

#ifndef BST_h
#define BST_h

class BST
{
private:
    struct node{
        int key;
        node* left;
        node* right;};
    
    node *root;
    node* CreateLeaf(int key);
    void addLeafPrivate(int key, node* ptr);
    void printInOrderPrivate(node*ptr);
    void printPrivateTree(node* ptr, int space);
public:
    BST();
    void addLeaf(int key);
    void printInOrder();
    void printTree(node* ptr, const int space);
    void printTree();
};


#endif /* BST_h */
bash-3.2$ cat BST.cpp 

#include <iostream>
#include <cstdlib>
#include "BST.h"

using namespace std;
#define SPACE 1
BST::BST()
{
    root=NULL;  //make sure root doesn't point to anything
}

BST::node* BST::CreateLeaf(int key){
    node* n=new node;
    n->key=key;
    n->left=NULL;
    n->right=NULL;
    return n; //return pointer to null}
}

void BST::addLeaf(int key){
        addLeafPrivate(key, root);
}
    
void BST::addLeafPrivate(int key, node *ptr){
    if(root==NULL){   ///no nodes made yet
        root=CreateLeaf(key);
    }
    else if(key < ptr->key){//if node is smaller than root
        if(ptr->left!=NULL){
            addLeafPrivate(key, ptr->left);
        }
        else{
            ptr->left=CreateLeaf(key);
        }
    }
    else if(key > ptr->key){
        if(ptr->right!=NULL){
            addLeafPrivate(key, ptr->right);
        }
        else
        {
            ptr->right=CreateLeaf(key);
            
        }
    }
    else
    {
        cout<<" The number has already been added.\n";
    }
    
}
void BST::printTree(){
    ;
    printPrivateTree(root,0);
}

void BST::printPrivateTree(node* ptr, int space){
    if(ptr==NULL){
       for(int i=0;i<space;++i){
            cout<<"\t";}
        cout<<'*'<<endl;
        return;}
    space+=SPACE;
    printPrivateTree(ptr->right, space+1);
    for(int i=SPACE;i<space;i++)
        cout<<"\t";
        cout<<ptr->key<<endl;
        printPrivateTree(ptr->left, space+1);
    }

void BST::printInOrder(){
        printInOrderPrivate(root);
    }

void BST::printInOrderPrivate(node *ptr){
        if(root!=NULL){
            if(ptr->left!=NULL)
            {
                printInOrderPrivate(ptr->left);
            }
            cout<<ptr->key<<" ";
            
            if(ptr->right!=NULL){
                printInOrderPrivate(ptr->right);
            }
        }
        else
        {
            cout<<"The tree is empty.";
        }
    }

bash-3.2$ ./a.out 

Print tree: 
								*
						99
								*
				69
								*
						58
								*
		45
								*
						44
								*
				38
										*
								23
										*
						15
								*
14
												*
										13
												*
								12
										*
						9
								*
				7
						*
		5
						*
				3
								*
						1
								*
bash-3.2$ ./a.out 

Print tree: 
								*
						99
								*
				69
								*
						58
								*
		45
								*
						44
								*
				38
										*
								23
										*
						15
								*
14
												*
										13
												*
								12
										*
						9
								*
				7
						*
		5
						*
				3
								*
						1
								*
bash-3.2$ ./a.out 

Print tree: 
								*
						99
								*
				69
								*
						58
								*
		45
								*
						44
								*
				38
										*
								23
										*
						15
								*
14
												*
										13
												*
								12
										*
						9
								*
				7
						*
		5
						*
				3
								*
						1
								*
bash-3.2$ exit
exit

Script done on Wed Jul 18 00:29:26 2018
